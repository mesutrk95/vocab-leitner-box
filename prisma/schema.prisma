// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  Admin
  User
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String? // You can use gravatar.com to get image profile
  password              String?
  role                  UserRole               @default(User)
  accounts              Account[]
  notes                 Note[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id      String   @id @default(cuid())
  userId  String   @unique
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Note {
  id         String       @id @default(cuid())
  userId     String
  content    Json
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  LeitnerBox LeitnerBox[]
}

model LeitnerTraining {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  LeitnerBox LeitnerBox[]
}

model LeitnerBox {
  id                String          @id @default(cuid())
  leitnerTrainingId String
  noteId            String
  boxNumber         Int
  createdAt         DateTime        @default(now())
  leitnerTraining   LeitnerTraining @relation(fields: [leitnerTrainingId], references: [id], onDelete: Cascade)
  note              Note            @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@unique([noteId, leitnerTrainingId])
}
